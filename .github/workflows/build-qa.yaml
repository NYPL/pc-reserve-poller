# On release,
# build a container and deploy to ECR
name: Publish to QA
on:
  release:
    types: [released]

jobs:
  check_qa_tag:
    runs-on: ubuntu-latest
    outputs:
      run_other_jobs: ${{ steps.check-qa-tag.outputs.run_jobs }}
    steps:
      - name: check qa tag ${{ github.ref }}
        id: check-qa-tag
        run: |
          if [[${{ github.ref }} =~ refs\/tags\/qa ]]; then
            echo "::set-output name=run_jobs::true"
          else
            echo "::set-output name=run_jobs::false"
          fi
  publish_qa:
    needs: [check_qa_tag]
    if: needs.check_qa_tag.outputs.run_other_jobs == 'true'
    name: Publish image to ECR and update ECS stack
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials from Prod account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: pc_reserve_poller
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:qa-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:qa-latest
      - name: Force ECS Update
        run: |
          aws ecs update-service --cluster pc-reserve-poller-qa --service pc-reserve-poller-app-qa --force-new-deployment
          aws ecs run-task --cluster pc-reserve-poller-qa --task-definition pc-reserve-poller-app-qa:14 --count 1
